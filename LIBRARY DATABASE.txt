#1. Create Database
CREATE DATABASE Library;

#2. Use Database
USE Library;

#3. Create Tables
#(a) Books Table
CREATE TABLE Books (book_id INT AUTO_INCREMENT PRIMARY KEY,title VARCHAR(100),author VARCHAR(100),category VARCHAR(50),price DECIMAL(6,2),quantity INT);

#(b) Members Table
CREATE TABLE Members (member_id INT AUTO_INCREMENT PRIMARY KEY,name VARCHAR(100),email VARCHAR(100) UNIQUE,phone VARCHAR(15),address VARCHAR(200),join_date DATE);

#(c) Borrow Table
CREATE TABLE Borrow (borrow_id INT AUTO_INCREMENT PRIMARY KEY,member_id INT,book_id INT,borrow_date DATE,return_date DATE, FOREIGN KEY (member_id) REFERENCES Members(member_id),FOREIGN KEY (book_id) REFERENCES Books(book_id));

#4. Alter Table – Add Column
ALTER TABLE Books ADD publisher VARCHAR(100);

#5. Insert Records
INSERT INTO Books (title, author, category, price, quantity, publisher) VALUES
('DBMS Concepts', 'Navathe', 'Education', 450.50, 10, 'Pearson'),
('Let Us C', 'Yashwant Kanetkar', 'Programming', 300.00, 15, 'BPB'),
('Operating Systems', 'Galvin', 'Education', 600.00, 8, 'Wiley'),
('Python Crash Course', 'Eric Matthes', 'Programming', 550.00, 20, 'No Starch Press'),
('Clean Code', 'Robert Martin', 'Software', 700.00, 12, 'Prentice Hall'),
('Data Structures', 'Seymour Lipschutz', 'Education', 400.00, 18, 'McGraw Hill'),
('Artificial Intelligence', 'Stuart Russell', 'AI', 800.00, 6, 'Pearson'),
('Computer Networks', 'Andrew Tanenbaum', 'Networking', 650.00, 9, 'Pearson');

INSERT INTO Members (name, email, phone, address, join_date) VALUES
('Ravi Kumar', 'ravi@example.com', '9876543210', 'Hyderabad', '2024-01-15'),
('Sneha Reddy', 'sneha@example.com', '9876501234', 'Vijayawada', '2024-02-10'),
('Arjun Singh', 'arjun@example.com', '9123456789', 'Delhi', '2024-03-05'),
('Priya Sharma', 'priya@example.com', '9988776655', 'Chennai', '2024-03-20'),
('Kiran Rao', 'kiran@example.com', '9876123450', 'Bangalore', '2024-04-01'),
('Anjali Verma', 'anjali@example.com', '9090909090', 'Mumbai', '2024-04-15'),
('Vikram Das', 'vikram@example.com', '9123987654', 'Kolkata', '2024-05-01');

INSERT INTO Borrow (member_id, book_id, borrow_date, return_date) VALUES
(1, 2, '2024-05-10', '2024-05-20'),
(2, 4, '2024-05-12', '2024-05-22'),
(3, 1, '2024-05-14', '2024-05-25'),
(4, 5, '2024-05-15', '2024-05-30'),
(5, 3, '2024-05-18', '2024-05-28');


#6. Update
UPDATE Books SET price = 500 WHERE book_id = 1;

#7. Delete
DELETE FROM Members WHERE member_id = 7;

#8. WHERE Clause
SELECT * FROM Books WHERE category = 'Education';

#9. Aggregate Functions
SELECT COUNT(*) AS TotalBooks, AVG(price) AS AvgPrice FROM Books;

#10. GROUP BY
SELECT category, COUNT(*) AS TotalBooks 
FROM Books 
GROUP BY category;

#11. HAVING
SELECT category, COUNT(*) AS TotalBooks 
FROM Books 
GROUP BY category 
HAVING COUNT(*) > 2;

#12. LIKE
SELECT * FROM Books WHERE title LIKE 'C%';

#13. Subquery
SELECT * FROM Books 
WHERE price > (SELECT AVG(price) FROM Books);

#14. Stored Procedure
DELIMITER //
CREATE PROCEDURE GetBooksByAuthor(IN authorName VARCHAR(100))
BEGIN
   SELECT * FROM Books WHERE author = authorName;
END //
DELIMITER ;

#15. Trigger
DELIMITER //
CREATE TRIGGER UpdateStock
AFTER INSERT ON Borrow
FOR EACH ROW
UPDATE Books 
SET quantity = quantity - 1
WHERE book_id = NEW.book_id;
DELIMITER ;


